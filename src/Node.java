//Do not edit this class, just add JavaDocs
//You may edit the main method for testing things if you want
//but do not change the actual class structure.

/**
 *  Node class for queues, linked lists, Binary search tree.
 * @param <T> Generic Type for the class.
 */
class Node<T> {
    /**
     * Value of the node.
     * @variable holds the value of a node.
     */
    private T value;
    /**
     * Node that the current node is pointing to.
     * @variable points to the next node in the LinkedList
     */
    private Node<T> next;
    /**
     * Node that is pointing to the current node.
     * @variable points to the previous node in a LinkedList
     */
    private Node<T> prev;

    /**
     * This is a constructor that takes in a value and creates a node object.
     *
     * @param value Any value the use would like to provide.
     */

    public Node(T value) {
        this.value = value;
    }

    /**
     * Returns the value of any given node.
     *
     * @return T returns the value of the node.
     */
    public T getValue() {
        return value;
    }

    /**
     * Sets the value of the node.
     *
     * @param value The value the node is being set to.
     */

    public void setValue(T value) {
        this.value = value;
    }

    /**
     * Returns the node the current node is pointing to.
     *
     * @return Node pointed to by current node.
     */

    public Node<T> getNext() {
        return this.next;
    }

    /**
     * Sets what the current node will point to.
     *
     * @param next The node that current will be pointing to.
     */

    public void setNext(Node<T> next) {
        this.next = next;
    }

    /**
     * Returns the node prior to the current node.
     *
     * @return Returns the node before the current node.
     */

    public Node<T> getPrev() {
        return this.prev;
    }

    /**
     * Sets the node that came before the current node.
     *
     * @param prev The node that prev will be set to.
     */

    public void setPrev(Node<T> prev) {
        this.prev = prev;
    }

    /**
     * Returns a string created by a linked list.
     *
     * @param head The first node of the linked list.
     * @return Returns a string generated by the linked list.
     */

    public static String listToString(Node<?> head) {
        StringBuilder ret = new StringBuilder();
        Node<?> current = head;
        while (current != null) {
            ret.append(current.value);
            ret.append(" ");
            current = current.getNext();
        }
        return ret.toString().trim();
    }

    /**
     * Returns a backwards string generated by a linked list.
     *
     * @param head The first node of the linked list.
     * @return Returns a string representing the linked list backwards.
     */

    public static String listToStringBackward(Node<?> head) {
        Node<?> current = head;
        while (current.getNext() != null) {
            current = current.getNext();
        }

        StringBuilder ret = new StringBuilder();
        while (current != null) {
            ret.append(current.value);
            ret.append(" ");
            current = current.getPrev();
        }
        return ret.toString().trim();
    }
}